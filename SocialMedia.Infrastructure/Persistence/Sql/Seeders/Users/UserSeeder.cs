using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using SocialMedia.Domain.Entities.Identity;
using System.Globalization;
using System.Text.RegularExpressions;

namespace SocialMedia.Infrastructure.Persistence.Sql.Seeders.Users;

public sealed class CsvUserSeeder : IUserSeeder
{
	private readonly SocialMediaDbContext _ctx;
	private readonly UserSeedOptions _opt;

	public CsvUserSeeder(SocialMediaDbContext ctx, IOptions<UserSeedOptions> opt)
	{
		_ctx = ctx;
		_opt = opt.Value;
	}

	public async Task SeedAsync(CancellationToken ct = default)
	{
		string avatarsDir = _opt.AvatarsDirectory;
		string csvPath = Path.Combine(avatarsDir, "labels.csv");
		if (!File.Exists(csvPath))
			throw new FileNotFoundException("labels.csv not found", csvPath);

		string? firstLine = File.ReadLines(csvPath).Skip(1).FirstOrDefault();
		if (firstLine == null)
			return;

		var parts = firstLine.Split(',', 3, StringSplitOptions.TrimEntries);
		if (parts.Length < 2)
			return;

		string firstLabel = parts[1].Trim();
		string firstName = CultureInfo.InvariantCulture.TextInfo.ToTitleCase(firstLabel.ToLowerInvariant());

		bool exists = await _ctx.Users.AnyAsync(u => u.Name == firstName, ct);
		if (exists) return;

		var hasher = new PasswordHasher<ApplicationUser>();
		var users = new List<ApplicationUser>();

		foreach (var line in File.ReadLines(csvPath).Skip(1))
		{
			parts = line.Split(',', 3, StringSplitOptions.TrimEntries);
			if (parts.Length < 2) continue;

			string fileName = parts[0];
			string label = parts[1];

			var slug = Regex.Replace(label.ToLowerInvariant(), @"\s+", ".");
			slug = Regex.Replace(slug, @"[^a-z0-9.]", string.Empty);
			string email = $"{slug}@gmail.com";

			string imgPath = Path.Combine(avatarsDir, fileName);
			if (!File.Exists(imgPath)) continue;

			byte[] bytes = await File.ReadAllBytesAsync(imgPath, ct);
			string base64 = Convert.ToBase64String(bytes);
			string mime = GetMime(Path.GetExtension(fileName));   // "image/jpeg"
			string dataUri = $"data:{mime};base64,{base64}";         // full <img src="…">

			var user = new ApplicationUser
			{
				Id = Guid.NewGuid(),
				UserName = email,
				NormalizedUserName = email.ToUpperInvariant(),
				Email = email,
				NormalizedEmail = email.ToUpperInvariant(),
				EmailConfirmed = true,
				Name = CultureInfo.InvariantCulture.TextInfo.ToTitleCase(label.ToLowerInvariant()),
				//Logo = dataUri,
				Description = $"Autogenerated profile for {label}.",
				SecurityStamp = Guid.NewGuid().ToString("D"),
				RefreshToken = null,
				RefreshTokenExpirationDateTime = DateTime.MinValue
			};

			user.PasswordHash = hasher.HashPassword(user, "abcdef"); // demo pwd
			users.Add(user);
		}

		await _ctx.Users.AddRangeAsync(users, ct);
		await _ctx.SaveChangesAsync(ct);
	}

	private static string GetMime(string ext) => ext.ToLowerInvariant() switch
	{
		".jpg" or ".jpeg" => "image/jpeg",
		".png" => "image/png",
		".gif" => "image/gif",
		".webp" => "image/webp",
		_ => "application/octet-stream"
	};
}
